			#regpair = DNS_names.objects.get(id = pair_id)
			#regpair.machine_name	= info['dns_expr']
			#regpair.ip_pair		= str(IPAddress(info['ip_pair']))
			#regpair.description	= info['dscr']
			#if (IPAddress(info['ip_pair']) == 6):
			#	regpair.is_ipv6 = bool(1)
			#else:
			#	regpair.is_ipv6 = bool(0)
			#now = datetime.datetime.today()
			##regpair.time_modified = now
			#regpair.save()
			
			#now = datetime.datetime.today()
			#info = form.cleaned_data
			#if (IPAddress(info['ip_pair']).version == 6):
			#	ipVersion = bool(1)
			#else:
			#	ipVersion = bool(0)
			#tp = request.POST['dns_typ']
			#if not (tp == '1BD' or tp == '2NA' or tp == '3AN'):
			#	tp = '1BD'
			#namepair_registered = DNS_names(machine_name	= info['dns_expr'],
			#				ip_pair		= str(IPAddress(info['ip_pair'])),
			#				dns_type	= tp,
			#				is_active 	= bool(1),
			#				is_ipv6 	= ipVersion,
			#				time_created 	= now,
			#		#vals = u'{\'machine_name\':\'%s\',\'ip_pair\':\'%s\',\'is_ipv6\':\'%s\',\'dns_type\':\'%s\',\'description\':\'%s\'}' % (DeleteRecord.machine_name, DeleteRecord.ip_pair, DeleteRecord.is_ipv6, DeleteRecord.dns_type, DeleteRecord.description)		
			#				description 	= info['dscr']								
			#				)		
			#namepair_registered.save()
			
			#if (IPAddress(service_add['ip_pair']).version == 6):
			#	ipVersion = bool(1)
			#else:
			#	ipVersion = bool(0)
			#tp = service_add['dns_typ']
			#if not (tp == '1BD' or tp == '2NA' or tp == '3AN'):
			#	tp = '1BD'
			#registered_services = DNS_names( machine_name	= service_add['dns_expr'],
			#				ip_pair		= str(IPAddress(service_add['ip_pair'])),
			#				dns_type	= tp,
			#				is_active 	= bool(1),
			#				is_ipv6 	= ipVersion,
			#				time_created 	= now,
			#				description 	= service_add['dscr']								
			#				)
			#registered_services.save()
			
			#mDelete.append(DNS_names.objects.get(id = item))
			#DNS_names.objects.get(id = item).delete()
			
			#now = datetime.datetime.today()
			#newService = DNS_names(machine_name	= newObject['service_name'],
			#			ip_pair		= original_machine.ip_pair,
			#			dns_type	= "2NA",
			#			is_active 	= bool(1),
			#			is_ipv6 	= original_machine.is_ipv6,
			#			time_created 	= now,
			#			description 	= newObject['dscr']								
			#			)
			#newService.save()
			
			#now = datetime.datetime.today()
			#mDelete = []
			#DeleteRecord = DHCP_ip_pool.objects.get(id = ip_id)
			#mDelete.append(DeleteRecord)	
			#mlength = len(mDelete)
			#DeleteRecord.delete()
			
			
			#now = datetime.datetime.today()
			#mDelete = []
			#mDelete.append(DHCP_machine.objects.get(id = m_id))	
			#DHCP_machine.objects.get(id = m_id).delete()
			#mlength = len(mDelete)
			
			#now = datetime.datetime.today()
			#if (IPAddress(info['IP_range1']).version == 6):
			#	ipVersion = bool(1)
			#else:
			#	ipVersion = bool(0)				
			#IP_pool_registered = DHCP_ip_pool(	IP_pool1	= str(IPAddress(info['IP_range1'])),
			#					IP_pool2	= str(IPAddress(info['IP_range2'])),
			#					is_active 	= bool(1),
			#					is_ipv6 	= ipVersion,
			#					time_created 	= now,
			#					description 	= info['dscr']								
			#					)		
			#IP_pool_registered.save()
	
						#now = datetime.datetime.today()
			#info = form.cleaned_data			
			#machine_registered = DHCP_machine(	MAC_pair = str(EUI(info['mcID'], dialect=mac_custom)),
			#					IP_pair	= str(IPAddress(info['ipID'])),
			#					PC_pair = info['pcID'],
			#					time_created = now,
			#					description = info['dscr']
			#					)
			#
			#machine_registered.save()
			
						#regpool = DHCP_ip_pool.objects.get(id = ip_id)
			#regpool.IP_pool1	= str(IPAddress(info['IP_range1']))
			#regpool.IP_pool2	= str(IPAddress(info['IP_range2']))
			#regpool.description	= info['dscr']
			#if (IPAddress(info['IP_range1']).version == 6):
			#	regpool.is_ipv6 = bool(1)
			#else:
			#	regpool.is_ipv6 = bool(0)
			#now = datetime.datetime.today()
			#regpool.time_modified = now
			#regpool.save()
			
			#regmachine = DHCP_machine.objects.get(id = m_id)
			#regmachine.MAC_pair 	= str(EUI(info['mcID'], dialect=mac_custom))
			#regmachine.IP_pair	= str(IPAddress(info['ipID']))
			#regmachine.PC_pair	= info['pcID']
			#regmachine.description	= info['dscr']
			#regmachine.save()
			
			{% for user in historyLog.NetUser_set.auth_user %}
				{{ user }}
			{% endfor %}
			
			<style>
			ul.CompactBullet {
				list-style-type: circle;
			 	/*background-color: black;*/
				margin-left: 7px;
				margin-top: 0px;
				padding-left: 7px;
				padding-top: 0px;
			}
			ul.CompactBullet li {
	 			/*background-color: #C0C0C0;*/
				margin-left: 0px;
				padding-left: 0px;
				padding-top: 2px;
				margin-top: 0px;
			}
			</style>
			
			
			<!ul class="CompactBullet">
			{#% for i in list  %#}
				<!li {{ i }} </li>
			{#% endfor %#}
			<!/ul>
			
			class test_machine(models.Model):
			MAC_pair	= models.CharField('MAC Address',max_length = 12)	#MAC address 
			IP_pair		= models.IPAddressField('IP Address')			#IP address 
			PC_pair		= models.CharField('PC Name',max_length = 12)		#PC name
			description 	= models.TextField('Description',blank=True, null=True)		#description of machine (optional)
			def __unicode__(self):
				return u'%s-%s-%s' % (self.MAC_pair, self.IP_pair, self.PC_pair)
			
			
			#valBef = { 'MAC_pair':mod_record.MAC_pair, 'IP_pair':mod_record.IP_pair,
			#	'PC_pair' :mod_record.PC_pair, 'description' :mod_record.description }
			
			
		#valBef = { 'IP_pool1':mod_record.IP_pool1, 'IP_pool2':mod_record.IP_pool2,
		#	'description' :mod_record.description }
		
		
		#valBef = { 'machine_name':mod_record.machine_name, 'dns_type':mod_record.dns_type,
		#	'ip_pair' :mod_record.ip_pair, 'description' :mod_record.description }
		

		elif len(val_aft) == 0: 
		result = list()	
		for (key, value) in val_bef.iteritems():
			val = (model_instance._meta.get_field(key).verbose_name,value)#val = (model_name._meta.get_field(key).verbose_name,value)
			result.append(val)
		return result
		
		
					{% ifequal historyLog.ActionType 'A' %} 
						Added
					{% else %} 
						{% ifequal historyLog.ActionType 'D' %} 
						Deleted
						{% else %} 
						Modified
						{% endifequal %}
					{% endifequal %} 
					
	
	{% for items in ChangeLog %}
	{% for fieldname, valueBefore, valueAfter, haschanged in items  %}
	{% ifequal HistoryLog.ActionType 'A' %}
		<tr class = "highlightRowADD">
	{% else %}
		{% ifequal HistoryLog.ActionType 'D' %}
			<tr class = "highlightRowDEL">
		{% else %}
			<tr class = "{% if haschanged %}highlightRowMOD{% endif %}">
		{% endifequal %}
	{% endifequal %}
		<td> {{ fieldname }} </td>
		<td> {% ifequal valueBefore '' %}none{% else %}{{ valueBefore }} {% endifequal %}</td>
		<td> {% ifequal valueAfter '' %}none{% else %} {{ valueAfter }} {% endifequal %}</td>			
	</tr>
	{% endfor %}
{% endfor %}

{% for changes in list  %}
<tr >
	{% for change in changes  %}
	<td> +{% ifequal change '' %} none {% else %} {{ change }} {% endifequal %} </td>
	{% endfor %}
</tr>
{% endfor %}
{% for fieldname, valueBefore, valueAfter, haschanged on row %}
	{#% ifequal forloop.parentloop.counter forloop.counter %#}
	{#% endifequal %#}	
	<tr>{{fieldname}}, {{valueBefore}}, {{valueAfter}}, {{haschanged}}</tr>
{% endfor %}	

			#if dt == '1BD':
			#	if is_ipaddress_in_netresource(request, combined_records[record].ip_pair ):
			#		if is_name_in_netresource(request, combined_records[record].machine_name ):
			#			has_permission = True
			#elif dt == '2NA':
			#	if is_name_in_netresource(request, combined_records[record].machine_name ):
			#		has_permission = Tr#val = self.filter(ip_address=ip).count()
		#if not val:
		#   	unique = Trueue
			#else:
			#	if is_ipaddress_in_netresource(request, combined_records[record].ip_pair ):
			#		has_permission = True
				
	#if record == 0:	
	#	type_filtered_records.append(combined_records[record])
	#else:	
			
	
