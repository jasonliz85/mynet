You can access the main window through 'window' :
<gedit.Window object at 0x16d4aa0 (GeditWindow at 0x1002070)>
>>> {'machine_name': u'eecs.qmul.ac.uk', 'description': u'this is the new ee and cs name ', 'ip_pair': u'138.37.172.220', 'is_active': True, 'time_created': datetime.datetime(2010, 7, 30, 8, 20, 39, 809862), 'dns_type': u'1BD', 'time_modified': datetime.datetime(2010, 7, 30, 9, 20, 19, 139368), 'time_deleted': None, 'id': 1, 'is_ipv6': False}

Traceback (most recent call last):
  File "/usr/lib/gedit-2/plugins/pythonconsole/console.py", line 332, in __run
    r = eval(command, self.namespace, self.namespace)
  File "<string>", line 1, in <module>
NameError: name 'datetime' is not defined
>>> import json
>>>  json.dumps({'machine_name': u'eecs.qmul.ac.uk', 'description': u'this is the new ee and cs name ', 'ip_pair': u'138.37.172.220', 'is_active': True, 'time_created': datetime.datetime(2010, 7, 30, 8, 20, 39, 809862), 'dns_type': u'1BD', 'time_modified': datetime.datetime(2010, 7, 30, 9, 20, 19, 139368), 'time_deleted': None, 'id': 1, 'is_ipv6': False})
Traceback (most recent call last):
  File "/usr/lib/gedit-2/plugins/pythonconsole/console.py", line 332, in __run
    r = eval(command, self.namespace, self.namespace)
  File "<string>", line 1, in <module>
NameError: name 'datetime' is not defined
>>>  json.dumps([{'machine_name': u'eecs.qmul.ac.uk', 'description': u'this is the new ee and cs name ', 'ip_pair': u'138.37.172.220', 'is_active': True, 'time_created': datetime.datetime(2010, 7, 30, 8, 20, 39, 809862), 'dns_type': u'1BD', 'time_modified': datetime.datetime(2010, 7, 30, 9, 20, 19, 139368), 'time_deleted': None, 'id': 1, 'is_ipv6': False}])
Traceback (most recent call last):
  File "/usr/lib/gedit-2/plugins/pythonconsole/console.py", line 332, in __run
    r = eval(command, self.namespace, self.namespace)
  File "<string>", line 1, in <module>
NameError: name 'datetime' is not defined
>>>  json.dumps(['foo', {'bar': ('baz', None, 1.0, 2)}])
'["foo", {"bar": ["baz", null, 1.0, 2]}]'
>>> import datetime

>>>  json.dumps([{'machine_name': u'eecs.qmul.ac.uk', 'description': u'this is the new ee and cs name ', 'ip_pair': u'138.37.172.220', 'is_active': True, 'time_created': datetime.datetime(2010, 7, 30, 8, 20, 39, 809862), 'dns_type': u'1BD', 'time_modified': datetime.datetime(2010, 7, 30, 9, 20, 19, 139368), 'time_deleted': None, 'id': 1, 'is_ipv6': False}])
Traceback (most recent call last):
  File "/usr/lib/gedit-2/plugins/pythonconsole/console.py", line 332, in __run
    r = eval(command, self.namespace, self.namespace)
  File "<string>", line 1, in <module>
  File "/usr/lib/python2.6/json/__init__.py", line 230, in dumps
    return _default_encoder.encode(obj)
  File "/usr/lib/python2.6/json/encoder.py", line 367, in encode
    chunks = list(self.iterencode(o))
  File "/usr/lib/python2.6/json/encoder.py", line 306, in _iterencode
    for chunk in self._iterencode_list(o, markers):
  File "/usr/lib/python2.6/json/encoder.py", line 204, in _iterencode_list
    for chunk in self._iterencode(value, markers):
  File "/usr/lib/python2.6/json/encoder.py", line 309, in _iterencode
    for chunk in self._iterencode_dict(o, markers):
  File "/usr/lib/python2.6/json/encoder.py", line 275, in _iterencode_dict
    for chunk in self._iterencode(value, markers):
  File "/usr/lib/python2.6/json/encoder.py", line 317, in _iterencode
    for chunk in self._iterencode_default(o, markers):
  File "/usr/lib/python2.6/json/encoder.py", line 323, in _iterencode_default
    newobj = self.default(o)
  File "/usr/lib/python2.6/json/encoder.py", line 344, in default
    raise TypeError(repr(o) + " is not JSON serializable")
TypeError: datetime.datetime(2010, 7, 30, 9, 20, 19, 139368) is not JSON serializable
>>>  json.dumps({'machine_name': u'eecs.qmul.ac.uk', 'description': u'this is the new ee and cs name ', 'ip_pair': u'138.37.172.220', 'is_active': True, 'time_created': datetime.datetime(2010, 7, 30, 8, 20, 39, 809862), 'dns_type': u'1BD', 'time_modified': datetime.datetime(2010, 7, 30, 9, 20, 19, 139368), 'time_deleted': None, 'id': 1, 'is_ipv6': False})
Traceback (most recent call last):
  File "/usr/lib/gedit-2/plugins/pythonconsole/console.py", line 332, in __run
    r = eval(command, self.namespace, self.namespace)
  File "<string>", line 1, in <module>
  File "/usr/lib/python2.6/json/__init__.py", line 230, in dumps
    return _default_encoder.encode(obj)
  File "/usr/lib/python2.6/json/encoder.py", line 367, in encode
    chunks = list(self.iterencode(o))
  File "/usr/lib/python2.6/json/encoder.py", line 309, in _iterencode
    for chunk in self._iterencode_dict(o, markers):
  File "/usr/lib/python2.6/json/encoder.py", line 275, in _iterencode_dict
    for chunk in self._iterencode(value, markers):
  File "/usr/lib/python2.6/json/encoder.py", line 317, in _iterencode
    for chunk in self._iterencode_default(o, markers):
  File "/usr/lib/python2.6/json/encoder.py", line 323, in _iterencode_default
    newobj = self.default(o)
  File "/usr/lib/python2.6/json/encoder.py", line 344, in default
    raise TypeError(repr(o) + " is not JSON serializable")
TypeError: datetime.datetime(2010, 7, 30, 9, 20, 19, 139368) is not JSON serializable
>>>  json.dumps({'machine_name': u'eecs.qmul.ac.uk', 'description': u'this is the new ee and cs name ', 'ip_pair': u'138.37.172.220', 'is_active': True, 'time_created': datetime.datetime(2010, 7, 30, 8, 20, 39, 809862), 'dns_type': u'1BD', 'id': 1, 'is_ipv6': False})
Traceback (most recent call last):
  File "/usr/lib/gedit-2/plugins/pythonconsole/console.py", line 332, in __run
    r = eval(command, self.namespace, self.namespace)
  File "<string>", line 1, in <module>
  File "/usr/lib/python2.6/json/__init__.py", line 230, in dumps
    return _default_encoder.encode(obj)
  File "/usr/lib/python2.6/json/encoder.py", line 367, in encode
    chunks = list(self.iterencode(o))
  File "/usr/lib/python2.6/json/encoder.py", line 309, in _iterencode
    for chunk in self._iterencode_dict(o, markers):
  File "/usr/lib/python2.6/json/encoder.py", line 275, in _iterencode_dict
    for chunk in self._iterencode(value, markers):
  File "/usr/lib/python2.6/json/encoder.py", line 317, in _iterencode
    for chunk in self._iterencode_default(o, markers):
  File "/usr/lib/python2.6/json/encoder.py", line 323, in _iterencode_default
    newobj = self.default(o)
  File "/usr/lib/python2.6/json/encoder.py", line 344, in default
    raise TypeError(repr(o) + " is not JSON serializable")
TypeError: datetime.datetime(2010, 7, 30, 8, 20, 39, 809862) is not JSON serializable
>>>  json.dumps({'machine_name': u'eecs.qmul.ac.uk'})
'{"machine_name": "eecs.qmul.ac.uk"}'
>>>  json.dumps({'machine_name': u'eecs.qmul.ac.uk', 'description': u'this is the new ee and cs name ')
Traceback (most recent call last):
  File "/usr/lib/gedit-2/plugins/pythonconsole/console.py", line 336, in __run
    exec command in self.namespace
  File "<string>", line 1
     json.dumps({'machine_name': u'eecs.qmul.ac.uk', 'description': u'this is the new ee and cs name ')
    ^
 IndentationError: unexpected indent
>>>  json.dumps({'machine_name': u'eecs.qmul.ac.uk', 'description': u'this is the new ee and cs name '})
'{"machine_name": "eecs.qmul.ac.uk", "description": "this is the new ee and cs name "}'
>>>  json.dumps({'machine_name': u'eecs.qmul.ac.uk', 'description': u'this is the new ee and cs name ', 'ip_pair': u'138.37.172.220', 'is_active': True, 'time_created': datetime.datetime(2010, 7, 30, 8, 20, 39, 809862), 'dns_type': u'1BD', 'id': 1, 'is_ipv6': False})
Traceback (most recent call last):
  File "/usr/lib/gedit-2/plugins/pythonconsole/console.py", line 332, in __run
    r = eval(command, self.namespace, self.namespace)
  File "<string>", line 1, in <module>
  File "/usr/lib/python2.6/json/__init__.py", line 230, in dumps
    return _default_encoder.encode(obj)
  File "/usr/lib/python2.6/json/encoder.py", line 367, in encode
    chunks = list(self.iterencode(o))
  File "/usr/lib/python2.6/json/encoder.py", line 309, in _iterencode
    for chunk in self._iterencode_dict(o, markers):
  File "/usr/lib/python2.6/json/encoder.py", line 275, in _iterencode_dict
    for chunk in self._iterencode(value, markers):
  File "/usr/lib/python2.6/json/encoder.py", line 317, in _iterencode
    for chunk in self._iterencode_default(o, markers):
  File "/usr/lib/python2.6/json/encoder.py", line 323, in _iterencode_default
    newobj = self.default(o)
  File "/usr/lib/python2.6/json/encoder.py", line 344, in default
    raise TypeError(repr(o) + " is not JSON serializable")
TypeError: datetime.datetime(2010, 7, 30, 8, 20, 39, 809862) is not JSON serializable
>>>  json.dumps({'machine_name': u'eecs.qmul.ac.uk', 'description': u'this is the new ee and cs name ', 'ip_pair': u'138.37.172.220', 'is_active': True})
'{"ip_pair": "138.37.172.220", "machine_name": "eecs.qmul.ac.uk", "is_active": true, "description": "this is the new ee and cs name "}'
>>>  json.dumps({'machine_name': u'eecs.qmul.ac.uk', 'description': u'this is the new ee and cs name ', 'ip_pair': u'138.37.172.220', 'is_active': True, 'dns_type': u'1BD', 'id': 1, 'is_ipv6': False})
'{"machine_name": "eecs.qmul.ac.uk", "description": "this is the new ee and cs name ", "ip_pair": "138.37.172.220", "is_active": true, "dns_type": "1BD", "id": 1, "is_ipv6": false}'
>>>  json.dumps({'machine_name': u'eecs.qmul.ac.uk', 'description': u'this is the new ee and cs name ', 'ip_pair': u'138.37.172.220', 'is_active': True})
'{"ip_pair": "138.37.172.220", "machine_name": "eecs.qmul.ac.uk", "is_active": true, "description": "this is the new ee and cs name "}'
>>> json.dumps({'machine_name': u'eecs.qmul.ac.uk', 'description': u'this is the new ee and cs name ', 'ip_pair': u'138.37.172.220', 'is_active': True, 'time_created': datetime.datetime(2010, 7, 30, 8, 20, 39, 809862), 'dns_type': u'1BD', 'time_modified': datetime.datetime(2010, 7, 30, 9, 20, 19, 139368), 'time_deleted': None, 'id': 1, 'is_ipv6': False})
Traceback (most recent call last):
  File "/usr/lib/gedit-2/plugins/pythonconsole/console.py", line 332, in __run
    r = eval(command, self.namespace, self.namespace)
  File "<string>", line 1, in <module>
  File "/usr/lib/python2.6/json/__init__.py", line 230, in dumps
    return _default_encoder.encode(obj)
  File "/usr/lib/python2.6/json/encoder.py", line 367, in encode
    chunks = list(self.iterencode(o))
  File "/usr/lib/python2.6/json/encoder.py", line 309, in _iterencode
    for chunk in self._iterencode_dict(o, markers):
  File "/usr/lib/python2.6/json/encoder.py", line 275, in _iterencode_dict
    for chunk in self._iterencode(value, markers):
  File "/usr/lib/python2.6/json/encoder.py", line 317, in _iterencode
    for chunk in self._iterencode_default(o, markers):
  File "/usr/lib/python2.6/json/encoder.py", line 323, in _iterencode_default
    newobj = self.default(o)
  File "/usr/lib/python2.6/json/encoder.py", line 344, in default
    raise TypeError(repr(o) + " is not JSON serializable")
TypeError: datetime.datetime(2010, 7, 30, 9, 20, 19, 139368) is not JSON serializable
>>> json.dumps({'machine_name': u'eecs.qmul.ac.uk', 'description': u'this is the new ee and cs name ', 'ip_pair': u'138.37.172.220', 'is_active': True, 'time_created': datetime.datetime(2010, 7, 30, 8, 20, 39, 809862), 'dns_type': u'1BD','time_deleted': None, 'id': 1, 'is_ipv6': False})
Traceback (most recent call last):
  File "/usr/lib/gedit-2/plugins/pythonconsole/console.py", line 332, in __run
    r = eval(command, self.namespace, self.namespace)
  File "<string>", line 1, in <module>
  File "/usr/lib/python2.6/json/__init__.py", line 230, in dumps
    return _default_encoder.encode(obj)
  File "/usr/lib/python2.6/json/encoder.py", line 367, in encode
    chunks = list(self.iterencode(o))
  File "/usr/lib/python2.6/json/encoder.py", line 309, in _iterencode
    for chunk in self._iterencode_dict(o, markers):
  File "/usr/lib/python2.6/json/encoder.py", line 275, in _iterencode_dict
    for chunk in self._iterencode(value, markers):
  File "/usr/lib/python2.6/json/encoder.py", line 317, in _iterencode
    for chunk in self._iterencode_default(o, markers):
  File "/usr/lib/python2.6/json/encoder.py", line 323, in _iterencode_default
    newobj = self.default(o)
  File "/usr/lib/python2.6/json/encoder.py", line 344, in default
    raise TypeError(repr(o) + " is not JSON serializable")
TypeError: datetime.datetime(2010, 7, 30, 8, 20, 39, 809862) is not JSON serializable
>>> json.dumps({'machine_name': u'eecs.qmul.ac.uk', 'description': u'this is the new ee and cs name ', 'ip_pair': u'138.37.172.220', 'is_active': True, 'time_created': datetime.datetime(2010, 7, 30, 8, 20, 39, 809862), 'dns_type': u'1BD','id': 1, 'is_ipv6': False})
Traceback (most recent call last):
  File "/usr/lib/gedit-2/plugins/pythonconsole/console.py", line 332, in __run
    r = eval(command, self.namespace, self.namespace)
  File "<string>", line 1, in <module>
  File "/usr/lib/python2.6/json/__init__.py", line 230, in dumps
    return _default_encoder.encode(obj)
  File "/usr/lib/python2.6/json/encoder.py", line 367, in encode
    chunks = list(self.iterencode(o))
  File "/usr/lib/python2.6/json/encoder.py", line 309, in _iterencode
    for chunk in self._iterencode_dict(o, markers):
  File "/usr/lib/python2.6/json/encoder.py", line 275, in _iterencode_dict
    for chunk in self._iterencode(value, markers):
  File "/usr/lib/python2.6/json/encoder.py", line 317, in _iterencode
    for chunk in self._iterencode_default(o, markers):
  File "/usr/lib/python2.6/json/encoder.py", line 323, in _iterencode_default
    newobj = self.default(o)
  File "/usr/lib/python2.6/json/encoder.py", line 344, in default
    raise TypeError(repr(o) + " is not JSON serializable")
TypeError: datetime.datetime(2010, 7, 30, 8, 20, 39, 809862) is not JSON serializable
>>> json.dumps({'machine_name': u'eecs.qmul.ac.uk', 'description': u'this is the new ee and cs name ', 'ip_pair': u'138.37.172.220', 'is_active': True, 'dns_type': u'1BD','id': 1, 'is_ipv6': False})
'{"machine_name": "eecs.qmul.ac.uk", "description": "this is the new ee and cs name ", "ip_pair": "138.37.172.220", "is_active": true, "dns_type": "1BD", "id": 1, "is_ipv6": false}'
>>> json.dumps({'machine_name': u'eecs.qmul.ac.uk', 'description': u'this is the new ee and cs name ', 'ip_pair': u'138.37.172.220', 'is_active': True, 'dns_type': u'1BD', 'time_deleted': None, 'id': 1, 'is_ipv6': False})
'{"dns_type": "1BD", "machine_name": "eecs.qmul.ac.uk", "description": "this is the new ee and cs name ", "ip_pair": "138.37.172.220", "is_ipv6": false, "is_active": true, "id": 1, "time_deleted": null}'
>>> init_value = json.dumps({'machine_name': u'eecs.qmul.ac.uk', 'description': u'this is the new ee and cs name ', 'ip_pair': u'138.37.172.220', 'is_active': True, 'dns_type': u'1BD', 'time_deleted': None, 'id': 1, 'is_ipv6': False})
>>> init_value
'{"dns_type": "1BD", "machine_name": "eecs.qmul.ac.uk", "description": "this is the new ee and cs name ", "ip_pair": "138.37.172.220", "is_ipv6": false, "is_active": true, "id": 1, "time_deleted": null}'
>>> real_value = json.loads(init_value)
>>> real_value
{u'machine_name': u'eecs.qmul.ac.uk', u'description': u'this is the new ee and cs name ', u'ip_pair': u'138.37.172.220', u'is_active': True, u'dns_type': u'1BD', u'time_deleted': None, u'id': 1, u'is_ipv6': False}
>>> real_value['machine_name']
u'eecs.qmul.ac.uk'
>>> init_value = json.JSONEncoder({'machine_name': u'eecs.qmul.ac.uk', 'description': u'this is the new ee and cs name ', 'ip_pair': u'138.37.172.220', 'is_active': True, 'dns_type': u'1BD', 'time_deleted': None, 'id': 1, 'is_ipv6': False})
>>> init_value
<json.encoder.JSONEncoder object at 0x1c6eb10>
>>> real_value = json.JSONDecoder(init_value)
>>> real_value
<json.decoder.JSONDecoder object at 0x1c6ebd0>
>>> json.load(real_value)_
Traceback (most recent call last):
  File "/usr/lib/gedit-2/plugins/pythonconsole/console.py", line 336, in __run
    exec command in self.namespace
  File "<string>", line 1
     json.load(real_value)_
                          ^
 SyntaxError: invalid syntax
>>> json.load(real_value)
Traceback (most recent call last):
  File "/usr/lib/gedit-2/plugins/pythonconsole/console.py", line 332, in __run
    r = eval(command, self.namespace, self.namespace)
  File "<string>", line 1, in <module>
  File "/usr/lib/python2.6/json/__init__.py", line 264, in load
    return loads(fp.read(),
AttributeError: 'JSONDecoder' object has no attribute 'read'
>>> real_value.machine_name
Traceback (most recent call last):
  File "/usr/lib/gedit-2/plugins/pythonconsole/console.py", line 332, in __run
    r = eval(command, self.namespace, self.namespace)
  File "<string>", line 1, in <module>
AttributeError: 'JSONDecoder' object has no attribute 'machine_name'
>>> init_value = {'machine_name': u'eecs.qmul.ac.uk', 'description': u'this is the new ee and cs name ', 'ip_pair': u'138.37.172.220', 'is_active': True, 'dns_type': u'1BD', 'time_deleted': None, 'id': 1, 'is_ipv6': False}
>>> init_value.machine_name
Traceback (most recent call last):
  File "/usr/lib/gedit-2/plugins/pythonconsole/console.py", line 332, in __run
    r = eval(command, self.namespace, self.namespace)
  File "<string>", line 1, in <module>
AttributeError: 'dict' object has no attribute 'machine_name'
>>> init_value['machine_name']
u'eecs.qmul.ac.uk'
>>> init_value = {'machine_name': u'eecs.qmul.ac.uk', 'description': u'this is the new ee and cs name ', 'ip_pair': u'138.37.172.220', 'is_active': True, 'dns_type': u'1BD', 'time_deleted': None, 'id': 1, 'is_ipv6': False}
>>> encoded_json_var = json.JSONEncoder(init_value)
>>> encoded_json_var
<json.encoder.JSONEncoder object at 0x1c6eb90>
>>> decoded_json_var = json.JSONDecoder(encoded_json_var)
>>> decoded_json_var 
<json.decoder.JSONDecoder object at 0x1c6ec10>
>>> init_value = {'machine_name': u'eecs.qmul.ac.uk', 'description': u'this is the new ee and cs name ', 'ip_pair': u'138.37.172.220', 'is_active': True, 'dns_type': u'1BD', 'time_deleted': None, 'id': 1, 'is_ipv6': False}
>>> encoded_json_var = json.dumps(init_value)
>>> encoded_json_var
'{"dns_type": "1BD", "machine_name": "eecs.qmul.ac.uk", "description": "this is the new ee and cs name ", "ip_pair": "138.37.172.220", "is_ipv6": false, "is_active": true, "id": 1, "time_deleted": null}'
>>> decoded_json_var = json.loads(encoded_json_var)
>>> decoded_json_var
{u'machine_name': u'eecs.qmul.ac.uk', u'description': u'this is the new ee and cs name ', u'ip_pair': u'138.37.172.220', u'is_active': True, u'dns_type': u'1BD', u'time_deleted': None, u'id': 1, u'is_ipv6': False}
>>> decoded_json_var['machine_name']
u'eecs.qmul.ac.uk'
>>> init_value2 = {'machine_name': u'elec.qmul.ac.uk', 'description': u'test', 'ip_pair': u'138.37.172.220', 'is_active': True, 'dns_type': u'1BD', 'time_deleted': None, 'id': 1, 'is_ipv6': False}
>>> encoded_json_var2 = json.dumps(init_value2)
>>> decoded_json_var2 = json.loads(encoded_json_var2)
>>> decoded_json_var2['machine_name']
u'elec.qmul.ac.uk'
>>> if decoded_json_var == decoded_json_var2 
Traceback (most recent call last):
  File "/usr/lib/gedit-2/plugins/pythonconsole/console.py", line 336, in __run
    exec command in self.namespace
  File "<string>", line 1
     if decoded_json_var == decoded_json_var2
                                             ^
 SyntaxError: invalid syntax
>>> if decoded_json_var == decoded_json_var2:
... 	print 'yes'
... else:
... 	print 'no'#
... 
no
>>> if encoded_json_var == encoded_json_var2:
... 	print 'yes'
... else:
... 	print 'no'
... 
no
>>> if encoded_json_var == encoded_json_var:
... 	print 'yes'
... else:
... 	print 'no'
... 
yes
>>> print encoded_json_var
{"dns_type": "1BD", "machine_name": "eecs.qmul.ac.uk", "description": "this is the new ee and cs name ", "ip_pair": "138.37.172.220", "is_ipv6": false, "is_active": true, "id": 1, "time_deleted": null}
>>> print encoded_json_var2
{"dns_type": "1BD", "machine_name": "elec.qmul.ac.uk", "description": "test", "ip_pair": "138.37.172.220", "is_ipv6": false, "is_active": true, "id": 1, "time_deleted": null}
>>> encoded_json_var2 = json.dumps(init_value2)
>>> encoded_json_var2
'{"dns_type": "1BD", "machine_name": "elec.qmul.ac.uk", "description": "test", "ip_pair": "138.37.172.220", "is_ipv6": false, "is_active": true, "id": 1, "time_deleted": null}'
>>> encoded_json_var2
'{"dns_type": "1BD", "machine_name": "elec.qmul.ac.uk", "description": "test", "ip_pair": "138.37.172.220", "is_ipv6": false, "is_active": true, "id": 1, "time_deleted": null}'
>>> encoded_json_var2['machine_name']
Traceback (most recent call last):
  File "/usr/lib/gedit-2/plugins/pythonconsole/console.py", line 332, in __run
    r = eval(command, self.namespace, self.namespace)
  File "<string>", line 1, in <module>
TypeError: string indices must be integers, not str
>>> import difflib
>>> s1 = "abcdefghijklmnop"
>>> s2 = "abcdefghi"
>>> s = difflib.SequenceMatcher(s1, s2)
>>> s
<difflib.SequenceMatcher instance at 0x1d2a830>
>>> for block in s.get_matching_blocks():
... 	print "match of length %d at a[%d] and b[%d]" % block
... 
match of length 9 at a[0] and b[0]
>>> 	print "atch of length %d at a[%d] and b[%d]" % block
Traceback (most recent call last):
  File "/usr/lib/gedit-2/plugins/pythonconsole/console.py", line 336, in __run
    exec command in self.namespace
  File "<string>", line 1
     print "atch of length %d at a[%d] and b[%d]" % block
    ^
 IndentationError: unexpected indent
>>> s = diff.Differ(encoded_json_var, encoded_json_var2)
Traceback (most recent call last):
  File "/usr/lib/gedit-2/plugins/pythonconsole/console.py", line 336, in __run
    exec command in self.namespace
  File "<string>", line 1, in <module>
NameError: name 'diff' is not defined
>>> s = difflib.Differ(encoded_json_var, encoded_json_var2)
>>> s
<difflib.Differ instance at 0x1d30200>
>>> for block in s.get_matching_blocks():
... 	print "match of length %d at a[%d] and b[%d]" % block
... 
Traceback (most recent call last):
  File "/usr/lib/gedit-2/plugins/pythonconsole/console.py", line 336, in __run
    exec command in self.namespace
  File "<string>", line 1, in <module>
AttributeError: Differ instance has no attribute 'get_matching_blocks'
>>> encoded_json_var
'{"dns_type": "1BD", "machine_name": "eecs.qmul.ac.uk", "description": "this is the new ee and cs name ", "ip_pair": "138.37.172.220", "is_ipv6": false, "is_active": true, "id": 1, "time_deleted": null}'
>>> encoded_json_var2
'{"dns_type": "1BD", "machine_name": "elec.qmul.ac.uk", "description": "test", "ip_pair": "138.37.172.220", "is_ipv6": false, "is_active": true, "id": 1, "time_deleted": null}'
>>> s1 = encoded_json_var
>>> s2 = encoded_json_var2
>>> matcher = difflib.SequenceMatcher(None, s1, s2)
>>> for tag, i1, i2, j1, j2 in matcher.get_opcodes():
... 	 print ("%7s s1[%d:%d] (%s) s2[%d:%d] (%s)" % 
           (tag, i1, i2, s1[i1:i2], j1, j2, s2[j1:j2]))
... 
  equal s1[0:38] ({"dns_type": "1BD", "machine_name": "e) s2[0:38] ({"dns_type": "1BD", "machine_name": "e)
 insert s1[38:38] () s2[38:39] (l)
  equal s1[38:40] (ec) s2[39:41] (ec)
 delete s1[40:41] (s) s2[41:41] ()
  equal s1[41:72] (.qmul.ac.uk", "description": "t) s2[41:72] (.qmul.ac.uk", "description": "t)
replace s1[72:74] (hi) s2[72:73] (e)
  equal s1[74:75] (s) s2[73:74] (s)
 delete s1[75:79] ( is ) s2[74:74] ()
  equal s1[79:80] (t) s2[74:75] (t)
 delete s1[80:102] (he new ee and cs name ) s2[75:75] ()
  equal s1[102:201] (", "ip_pair": "138.37.172.220", "is_ipv6": false, "is_active": true, "id": 1, "time_deleted": null}) s2[75:174] (", "ip_pair": "138.37.172.220", "is_ipv6": false, "is_active": true, "id": 1, "time_deleted": null})
>>> init_value
{'dns_type': u'1BD', 'machine_name': u'eecs.qmul.ac.uk', 'description': u'this is the new ee and cs name ', 'ip_pair': u'138.37.172.220', 'is_ipv6': False, 'is_active': True, 'id': 1, 'time_deleted': None}
>>> init_value2
{'dns_type': u'1BD', 'machine_name': u'elec.qmul.ac.uk', 'description': u'test', 'ip_pair': u'138.37.172.220', 'is_ipv6': False, 'is_active': True, 'id': 1, 'time_deleted': None}
>>> s2 = init_value2
>>> s1 = init_value
>>> matcher = difflib.SequenceMatcher(None, s1, s2)
>>> for tag, i1, i2, j1, j2 in matcher.get_opcodes():
... 	print ("%7s s1[%d:%d] (%s) s2[%d:%d] (%s)" % 
           (tag, i1, i2, s1[i1:i2], j1, j2, s2[j1:j2]))
... 
Traceback (most recent call last):
  File "/usr/lib/gedit-2/plugins/pythonconsole/console.py", line 336, in __run
    exec command in self.namespace
  File "<string>", line 1, in <module>
  File "/usr/lib/python2.6/difflib.py", line 565, in get_opcodes
    for ai, bj, size in self.get_matching_blocks():
  File "/usr/lib/python2.6/difflib.py", line 494, in get_matching_blocks
    i, j, k = x = self.find_longest_match(alo, ahi, blo, bhi)
  File "/usr/lib/python2.6/difflib.py", line 419, in find_longest_match
    for j in b2j.get(a[i], nothing):
KeyError: 0
>>> macther
Traceback (most recent call last):
  File "/usr/lib/gedit-2/plugins/pythonconsole/console.py", line 332, in __run
    r = eval(command, self.namespace, self.namespace)
  File "<string>", line 1, in <module>
NameError: name 'macther' is not defined
>>> matcher
<difflib.SequenceMatcher instance at 0x1cfd7a0>
>>> 
